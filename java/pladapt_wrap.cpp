/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_pladaptJNI = NULL;
    jmethodID director_method_ids[25];
  }
}

#include "pladapt/GenericConfiguration.h"
#include "pladapt/GenericEnvironment.h"
#include "pladapt/JointEnvironment.h"
#include "pladapt/GenericUtilityFunction.h"
#include "pladapt/GenericConfigurationManager.h"
#include "pladapt/EnvironmentDTMCPartitioned.h"
#include "pladapt/JavaSDPAdaptationManager.h"
#include "pladapt/GenericEnvironmentDTMCPartitioned.h"
#include "pladapt/timeseries/ScenarioTree.h"
#include "pladapt/timeseries/TimeSeriesPredictor.h"
#include "pladapt/PMCAdaptationManager.h"
#include <sstream>
#include <math.h>
#include <float.h>
  namespace pladapt {
    double testGeneric(const GenericUtilityFunction& u, const GenericConfiguration& c, const GenericEnvironment& e);
    double testUtilityFunction(const UtilityFunction& u, const Configuration& c, const Environment& e);
    double testUtilityFunctionWithConfigMgr(const UtilityFunction& u, const GenericConfigurationManager& cm, const Environment& e);
  }


#include <string>

SWIGINTERN jobject pladapt_Environment_swigOriginalObject(pladapt::Environment *self,JNIEnv *jenv){
        Swig::Director *dir = dynamic_cast<Swig::Director*>(self);
        //std::cerr << "Dynamic_cast: " << dir << "\n";
        if (dir) {
            return dir->swig_get_self(jenv);
        }
        return NULL;
    }
SWIGINTERN std::string pladapt_Environment_toString(pladapt::Environment *self){
      std::ostringstream os;
      self->printOn(os);
      return os.str();
    }
SWIGINTERN jobject pladapt_Configuration_swigOriginalObject(pladapt::Configuration *self,JNIEnv *jenv){
        Swig::Director *dir = dynamic_cast<Swig::Director*>(self);
        //std::cerr << "Dynamic_cast: " << dir << "\n";
        if (dir) {
            return dir->swig_get_self(jenv);
        }
        return NULL;
    }
SWIGINTERN std::string pladapt_Configuration_toString(pladapt::Configuration *self){
      std::ostringstream os;
      self->printOn(os);
      return os.str();
    }
SWIGINTERN std::string pladapt_GenericConfiguration_toString(pladapt::GenericConfiguration *self){
      std::ostringstream os;
      self->printOn(os);
      return os.str();
    }
SWIGINTERN std::string pladapt_GenericEnvironment_toString(pladapt::GenericEnvironment *self){
      std::ostringstream os;
      self->printOn(os);
      return os.str();
    }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::string pladapt_EnvironmentDTMCPartitioned_toString(pladapt::EnvironmentDTMCPartitioned *self){
      std::ostringstream os;
      self->printOn(os);
      return os.str();
    }

#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif

SWIGINTERN pladapt::EnvironmentDTMCPartitioned pladapt_timeseries_TimeSeriesPredictor_generateEnvironmentDTMC__SWIG_0(pladapt::timeseries::TimeSeriesPredictor *self,unsigned int branchingDepth,unsigned int depth=0,double lowerBound=-DBL_MAX){
  auto pTree = self->createScenarioTree(lowerBound, DBL_MAX, branchingDepth, depth);
  auto envDTMC = pTree->getEnvironmentDTMC(
					   [](double mean) {auto envState = std::make_shared<pladapt::GenericEnvironment>("m"); envState->set<double>("m", mean); envState->set<double>("v", pow(mean, 2)); return envState;}); // assume exponential
      delete pTree;
      return envDTMC;
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pladapt_wrap.h"

SwigDirector_Environment::SwigDirector_Environment(JNIEnv *jenv) : pladapt::Environment(), Swig::Director(jenv) {
}

unsigned int SwigDirector_Environment::getNumberOfComponents() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pladapt::Environment::getNumberOfComponents();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Environment::getNumberOfComponents ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment const &SwigDirector_Environment::getComponent(unsigned int c) const {
  pladapt::Environment *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jc  ;
  
  if (!swig_override[1]) {
    return pladapt::Environment::getComponent(c);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc = (jlong) c;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[1], swigjobj, jc);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type pladapt::Environment const &");
      return (pladapt::Environment const &)*c_result;
    }
    c_result = *(pladapt::Environment **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Environment::getComponent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (pladapt::Environment const &)*c_result;
}

double SwigDirector_Environment::asDouble() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return pladapt::Environment::asDouble();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Environment::asDouble ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment::EnvironmentClass SwigDirector_Environment::getType() const {
  pladapt::Environment::EnvironmentClass c_result = SwigValueInit< pladapt::Environment::EnvironmentClass >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return pladapt::Environment::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (pladapt::Environment::EnvironmentClass)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Environment::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Environment::printOn(std::ostream &os) const {
  SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pladapt::Environment::printOn.");
}

SwigDirector_Environment::~SwigDirector_Environment() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Environment::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getNumberOfComponents", "()J", NULL 
    },
    {
      "getComponent", "(J)Lpladapt/Environment;", NULL 
    },
    {
      "asDouble", "()D", NULL 
    },
    {
      "getType", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/Environment");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Configuration::SwigDirector_Configuration(JNIEnv *jenv) : pladapt::Configuration(), Swig::Director(jenv) {
}

void SwigDirector_Configuration::printOn(std::ostream &os) const {
  SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pladapt::Configuration::printOn.");
}

pladapt::Configuration::ConfigurationClass SwigDirector_Configuration::getType() const {
  pladapt::Configuration::ConfigurationClass c_result = SwigValueInit< pladapt::Configuration::ConfigurationClass >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pladapt::Configuration::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (pladapt::Configuration::ConfigurationClass)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Configuration::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_Configuration::~SwigDirector_Configuration() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_Configuration::equals(pladapt::Configuration const &other) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jother = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method pladapt::Configuration::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jother = (pladapt::Configuration *) &other; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[5], swigjobj, jother);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::Configuration::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Configuration::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getType", "()I", NULL 
    },
    {
      "equals", "(Lpladapt/Configuration;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/Configuration");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_GenericConfiguration::SwigDirector_GenericConfiguration(JNIEnv *jenv) : pladapt::GenericConfiguration(), Swig::Director(jenv) {
}

void SwigDirector_GenericConfiguration::printOn(std::ostream &os) const {
  pladapt::GenericConfiguration::printOn(os);
}

pladapt::Configuration::ConfigurationClass SwigDirector_GenericConfiguration::getType() const {
  pladapt::Configuration::ConfigurationClass c_result = SwigValueInit< pladapt::Configuration::ConfigurationClass >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pladapt::GenericConfiguration::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (pladapt::Configuration::ConfigurationClass)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericConfiguration::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_GenericConfiguration::~SwigDirector_GenericConfiguration() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_GenericConfiguration::equals(pladapt::Configuration const &other) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jother = 0 ;
  
  if (!swig_override[1]) {
    return pladapt::GenericConfiguration::equals(other);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jother = (pladapt::Configuration *) &other; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[7], swigjobj, jother);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericConfiguration::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GenericConfiguration::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getType", "()I", NULL 
    },
    {
      "equals", "(Lpladapt/Configuration;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/GenericConfiguration");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_GenericEnvironment::SwigDirector_GenericEnvironment(JNIEnv *jenv) : pladapt::GenericEnvironment(), Swig::Director(jenv) {
}

SwigDirector_GenericEnvironment::SwigDirector_GenericEnvironment(JNIEnv *jenv, std::string const &doubleProperty) : pladapt::GenericEnvironment(doubleProperty), Swig::Director(jenv) {
}

unsigned int SwigDirector_GenericEnvironment::getNumberOfComponents() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pladapt::Environment::getNumberOfComponents();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericEnvironment::getNumberOfComponents ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment const &SwigDirector_GenericEnvironment::getComponent(unsigned int c) const {
  pladapt::Environment *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jc  ;
  
  if (!swig_override[1]) {
    return pladapt::Environment::getComponent(c);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc = (jlong) c;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[9], swigjobj, jc);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type pladapt::Environment const &");
      return (pladapt::Environment const &)*c_result;
    }
    c_result = *(pladapt::Environment **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericEnvironment::getComponent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (pladapt::Environment const &)*c_result;
}

double SwigDirector_GenericEnvironment::asDouble() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return pladapt::GenericEnvironment::asDouble();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[10], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericEnvironment::asDouble ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment::EnvironmentClass SwigDirector_GenericEnvironment::getType() const {
  pladapt::Environment::EnvironmentClass c_result = SwigValueInit< pladapt::Environment::EnvironmentClass >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return pladapt::GenericEnvironment::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[11], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (pladapt::Environment::EnvironmentClass)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericEnvironment::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GenericEnvironment::printOn(std::ostream &os) const {
  pladapt::GenericEnvironment::printOn(os);
}

SwigDirector_GenericEnvironment::~SwigDirector_GenericEnvironment() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_GenericEnvironment::equals(pladapt::Environment const &other) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jother = 0 ;
  
  if (!swig_override[4]) {
    return pladapt::GenericEnvironment::equals(other);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Environment **)&jother = (pladapt::Environment *) &other; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[12], swigjobj, jother);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericEnvironment::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GenericEnvironment::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getNumberOfComponents", "()J", NULL 
    },
    {
      "getComponent", "(J)Lpladapt/Environment;", NULL 
    },
    {
      "asDouble", "()D", NULL 
    },
    {
      "getType", "()I", NULL 
    },
    {
      "equals", "(Lpladapt/Environment;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/GenericEnvironment");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_JointEnvironment::SwigDirector_JointEnvironment(JNIEnv *jenv, std::shared_ptr< pladapt::Environment > const &componentA, std::shared_ptr< pladapt::Environment > const &componentB) : pladapt::JointEnvironment(componentA, componentB), Swig::Director(jenv) {
}

unsigned int SwigDirector_JointEnvironment::getNumberOfComponents() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return pladapt::JointEnvironment::getNumberOfComponents();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[13], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::JointEnvironment::getNumberOfComponents ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment const &SwigDirector_JointEnvironment::getComponent(unsigned int c) const {
  pladapt::Environment *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jc  ;
  
  if (!swig_override[1]) {
    return pladapt::JointEnvironment::getComponent(c);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc = (jlong) c;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[14], swigjobj, jc);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type pladapt::Environment const &");
      return (pladapt::Environment const &)*c_result;
    }
    c_result = *(pladapt::Environment **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::JointEnvironment::getComponent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (pladapt::Environment const &)*c_result;
}

double SwigDirector_JointEnvironment::asDouble() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return pladapt::Environment::asDouble();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[15], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::JointEnvironment::asDouble ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

pladapt::Environment::EnvironmentClass SwigDirector_JointEnvironment::getType() const {
  pladapt::Environment::EnvironmentClass c_result = SwigValueInit< pladapt::Environment::EnvironmentClass >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return pladapt::JointEnvironment::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (pladapt::Environment::EnvironmentClass)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::JointEnvironment::getType ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_JointEnvironment::printOn(std::ostream &os) const {
  pladapt::JointEnvironment::printOn(os);
}

SwigDirector_JointEnvironment::~SwigDirector_JointEnvironment() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_JointEnvironment::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getNumberOfComponents", "()J", NULL 
    },
    {
      "getComponent", "(J)Lpladapt/Environment;", NULL 
    },
    {
      "asDouble", "()D", NULL 
    },
    {
      "getType", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/JointEnvironment");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_UtilityFunction::SwigDirector_UtilityFunction(JNIEnv *jenv) : pladapt::UtilityFunction(), Swig::Director(jenv) {
}

double SwigDirector_UtilityFunction::getAdditiveUtility(pladapt::Configuration const &config, pladapt::Environment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[0]) {
    return pladapt::UtilityFunction::getAdditiveUtility(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jconfig = (pladapt::Configuration *) &config; 
    *(pladapt::Environment **)&jenvironment = (pladapt::Environment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[17], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::UtilityFunction::getAdditiveUtility ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_UtilityFunction::getMultiplicativeUtility(pladapt::Configuration const &config, pladapt::Environment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[1]) {
    return pladapt::UtilityFunction::getMultiplicativeUtility(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jconfig = (pladapt::Configuration *) &config; 
    *(pladapt::Environment **)&jenvironment = (pladapt::Environment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[18], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::UtilityFunction::getMultiplicativeUtility ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_UtilityFunction::getFinalReward(pladapt::Configuration const &config, pladapt::Environment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[2]) {
    return pladapt::UtilityFunction::getFinalReward(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jconfig = (pladapt::Configuration *) &config; 
    *(pladapt::Environment **)&jenvironment = (pladapt::Environment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[19], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::UtilityFunction::getFinalReward ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_UtilityFunction::getAdaptationReward(pladapt::Configuration const &from, pladapt::Configuration const &to, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfrom = 0 ;
  jlong jto = 0 ;
  jint jtime  ;
  
  if (!swig_override[3]) {
    return pladapt::UtilityFunction::getAdaptationReward(from,to,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::Configuration **)&jfrom = (pladapt::Configuration *) &from; 
    *(pladapt::Configuration **)&jto = (pladapt::Configuration *) &to; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[20], swigjobj, jfrom, jto, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::UtilityFunction::getAdaptationReward ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_UtilityFunction::~SwigDirector_UtilityFunction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_UtilityFunction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getAdditiveUtility", "(Lpladapt/Configuration;Lpladapt/Environment;I)D", NULL 
    },
    {
      "getMultiplicativeUtility", "(Lpladapt/Configuration;Lpladapt/Environment;I)D", NULL 
    },
    {
      "getFinalReward", "(Lpladapt/Configuration;Lpladapt/Environment;I)D", NULL 
    },
    {
      "getAdaptationReward", "(Lpladapt/Configuration;Lpladapt/Configuration;I)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/UtilityFunction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_GenericUtilityFunction::SwigDirector_GenericUtilityFunction(JNIEnv *jenv) : pladapt::GenericUtilityFunction(), Swig::Director(jenv) {
}

SwigDirector_GenericUtilityFunction::~SwigDirector_GenericUtilityFunction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_GenericUtilityFunction::getGenAdditiveUtility(pladapt::GenericConfiguration const &config, pladapt::GenericEnvironment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[0]) {
    return pladapt::GenericUtilityFunction::getGenAdditiveUtility(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::GenericConfiguration **)&jconfig = (pladapt::GenericConfiguration *) &config; 
    *(pladapt::GenericEnvironment **)&jenvironment = (pladapt::GenericEnvironment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[21], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericUtilityFunction::getGenAdditiveUtility ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_GenericUtilityFunction::getGenMultiplicativeUtility(pladapt::GenericConfiguration const &config, pladapt::GenericEnvironment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[1]) {
    return pladapt::GenericUtilityFunction::getGenMultiplicativeUtility(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::GenericConfiguration **)&jconfig = (pladapt::GenericConfiguration *) &config; 
    *(pladapt::GenericEnvironment **)&jenvironment = (pladapt::GenericEnvironment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[22], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericUtilityFunction::getGenMultiplicativeUtility ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_GenericUtilityFunction::getGenFinalReward(pladapt::GenericConfiguration const &config, pladapt::GenericEnvironment const &environment, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconfig = 0 ;
  jlong jenvironment = 0 ;
  jint jtime  ;
  
  if (!swig_override[2]) {
    return pladapt::GenericUtilityFunction::getGenFinalReward(config,environment,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::GenericConfiguration **)&jconfig = (pladapt::GenericConfiguration *) &config; 
    *(pladapt::GenericEnvironment **)&jenvironment = (pladapt::GenericEnvironment *) &environment; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[23], swigjobj, jconfig, jenvironment, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericUtilityFunction::getGenFinalReward ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_GenericUtilityFunction::getGenAdaptationReward(pladapt::GenericConfiguration const &from, pladapt::GenericConfiguration const &to, int time) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfrom = 0 ;
  jlong jto = 0 ;
  jint jtime  ;
  
  if (!swig_override[3]) {
    return pladapt::GenericUtilityFunction::getGenAdaptationReward(from,to,time);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(pladapt::GenericConfiguration **)&jfrom = (pladapt::GenericConfiguration *) &from; 
    *(pladapt::GenericConfiguration **)&jto = (pladapt::GenericConfiguration *) &to; 
    jtime = (jint) time;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_pladaptJNI, Swig::director_method_ids[24], swigjobj, jfrom, jto, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in pladapt::GenericUtilityFunction::getGenAdaptationReward ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GenericUtilityFunction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getGenAdditiveUtility", "(Lpladapt/GenericConfiguration;Lpladapt/GenericEnvironment;I)D", NULL 
    },
    {
      "getGenMultiplicativeUtility", "(Lpladapt/GenericConfiguration;Lpladapt/GenericEnvironment;I)D", NULL 
    },
    {
      "getGenFinalReward", "(Lpladapt/GenericConfiguration;Lpladapt/GenericEnvironment;I)D", NULL 
    },
    {
      "getGenAdaptationReward", "(Lpladapt/GenericConfiguration;Lpladapt/GenericConfiguration;I)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("pladapt/GenericUtilityFunction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_Environment_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (unsigned int)((pladapt::Environment const *)arg1)->getNumberOfComponents();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_Environment_1getNumberOfComponentsSwigExplicitEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (unsigned int)((pladapt::Environment const *)arg1)->pladapt::Environment::getNumberOfComponents();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_Environment_1getComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  unsigned int arg2 ;
  pladapt::Environment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (pladapt::Environment *) &((pladapt::Environment const *)arg1)->getComponent(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Environment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_Environment_1getComponentSwigExplicitEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  unsigned int arg2 ;
  pladapt::Environment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (pladapt::Environment *) &((pladapt::Environment const *)arg1)->pladapt::Environment::getComponent(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Environment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_Environment_1asDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (double)((pladapt::Environment const *)arg1)->asDouble();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_Environment_1asDoubleSwigExplicitEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (double)((pladapt::Environment const *)arg1)->pladapt::Environment::asDouble();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_Environment_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::Environment const *)arg1)->getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_Environment_1getTypeSwigExplicitEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::Environment const *)arg1)->pladapt::Environment::getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1Environment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jobject JNICALL Java_pladapt_pladaptJNI_Environment_1swigOriginalObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  JNIEnv *arg2 = (JNIEnv *) 0 ;
  jobject result;
  
  (void)jenv;
  (void)jcls;
  arg2 = jenv;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = pladapt_Environment_swigOriginalObject(arg1,arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_Environment_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::Environment *arg1 = (pladapt::Environment *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Environment **)&jarg1; 
  {
    try {
      result = pladapt_Environment_toString(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1Environment(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::Environment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::Environment *)new SwigDirector_Environment(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Environment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_Environment_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::Environment *obj = *((pladapt::Environment **)&objarg);
  (void)jcls;
  SwigDirector_Environment *director = dynamic_cast<SwigDirector_Environment *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_Environment_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::Environment *obj = *((pladapt::Environment **)&objarg);
  SwigDirector_Environment *director = dynamic_cast<SwigDirector_Environment *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_Configuration_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  pladapt::Configuration::ConfigurationClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  {
    try {
      result = (pladapt::Configuration::ConfigurationClass)((pladapt::Configuration const *)arg1)->getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_Configuration_1getTypeSwigExplicitConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  pladapt::Configuration::ConfigurationClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  {
    try {
      result = (pladapt::Configuration::ConfigurationClass)((pladapt::Configuration const *)arg1)->pladapt::Configuration::getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1Configuration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_Configuration_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  SwigDirector_Configuration *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_Configuration *>(arg1);
  {
    try {
      result = (bool)((SwigDirector_Configuration const *)darg)->equals((pladapt::Configuration const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_pladapt_pladaptJNI_Configuration_1swigOriginalObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  JNIEnv *arg2 = (JNIEnv *) 0 ;
  jobject result;
  
  (void)jenv;
  (void)jcls;
  arg2 = jenv;
  (void)jarg1_;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  {
    try {
      result = pladapt_Configuration_swigOriginalObject(arg1,arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_Configuration_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::Configuration *arg1 = (pladapt::Configuration *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::Configuration **)&jarg1; 
  {
    try {
      result = pladapt_Configuration_toString(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1Configuration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::Configuration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::Configuration *)new SwigDirector_Configuration(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Configuration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_Configuration_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::Configuration *obj = *((pladapt::Configuration **)&objarg);
  (void)jcls;
  SwigDirector_Configuration *director = dynamic_cast<SwigDirector_Configuration *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_Configuration_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::Configuration *obj = *((pladapt::Configuration **)&objarg);
  SwigDirector_Configuration *director = dynamic_cast<SwigDirector_Configuration *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1GenericConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->isEqual((pladapt::GenericConfiguration const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  pladapt::Configuration::ConfigurationClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  {
    try {
      result = (pladapt::Configuration::ConfigurationClass)((pladapt::GenericConfiguration const *)arg1)->getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1getTypeSwigExplicitGenericConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  pladapt::Configuration::ConfigurationClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  {
    try {
      result = (pladapt::Configuration::ConfigurationClass)((pladapt::GenericConfiguration const *)arg1)->pladapt::GenericConfiguration::getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  SwigDirector_GenericConfiguration *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_GenericConfiguration *>(arg1);
  {
    try {
      result = (bool)((SwigDirector_GenericConfiguration const *)darg)->equals((pladapt::Configuration const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1equalsSwigExplicitGenericConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  SwigDirector_GenericConfiguration *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_GenericConfiguration *>(arg1);
  {
    try {
      result = (bool)((SwigDirector_GenericConfiguration const *)darg)->equalsSwigPublic((pladapt::Configuration const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (double)((pladapt::GenericConfiguration const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR get< double >((std::string const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< double >((std::string const &)*arg2,(double const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)((pladapt::GenericConfiguration const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR get< int >((std::string const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1setInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< int >((std::string const &)*arg2,(int const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1getBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((pladapt::GenericConfiguration const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR get< bool >((std::string const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1setBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< bool >((std::string const &)*arg2,(bool const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::GenericConfiguration *arg1 = (pladapt::GenericConfiguration *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericConfiguration **)&jarg1; 
  {
    try {
      result = pladapt_GenericConfiguration_toString(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::GenericConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::GenericConfiguration *)new SwigDirector_GenericConfiguration(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::GenericConfiguration *obj = *((pladapt::GenericConfiguration **)&objarg);
  (void)jcls;
  SwigDirector_GenericConfiguration *director = dynamic_cast<SwigDirector_GenericConfiguration *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::GenericConfiguration *obj = *((pladapt::GenericConfiguration **)&objarg);
  SwigDirector_GenericConfiguration *director = dynamic_cast<SwigDirector_GenericConfiguration *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericEnvironment_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::GenericEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::GenericEnvironment *)new SwigDirector_GenericEnvironment(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericEnvironment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericEnvironment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  pladapt::GenericEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (pladapt::GenericEnvironment *)new SwigDirector_GenericEnvironment(jenv,(std::string const &)*arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericEnvironment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1GenericEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1asDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      result = (double)((pladapt::GenericEnvironment const *)arg1)->asDouble();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1asDoubleSwigExplicitGenericEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      result = (double)((pladapt::GenericEnvironment const *)arg1)->pladapt::GenericEnvironment::asDouble();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::GenericEnvironment const *)arg1)->getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1getTypeSwigExplicitGenericEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::GenericEnvironment const *)arg1)->pladapt::GenericEnvironment::getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  pladapt::GenericEnvironment *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  arg2 = *(pladapt::GenericEnvironment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->isEqual((pladapt::GenericEnvironment const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  pladapt::Environment *arg2 = 0 ;
  SwigDirector_GenericEnvironment *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  arg2 = *(pladapt::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_GenericEnvironment *>(arg1);
  {
    try {
      result = (bool)((SwigDirector_GenericEnvironment const *)darg)->equals((pladapt::Environment const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1equalsSwigExplicitGenericEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  pladapt::Environment *arg2 = 0 ;
  SwigDirector_GenericEnvironment *darg = 0;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  arg2 = *(pladapt::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_GenericEnvironment *>(arg1);
  {
    try {
      result = (bool)((SwigDirector_GenericEnvironment const *)darg)->equalsSwigPublic((pladapt::Environment const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (double)((pladapt::GenericEnvironment const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR get< double >((std::string const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< double >((std::string const &)*arg2,(double const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (int)((pladapt::GenericEnvironment const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR get< int >((std::string const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1setInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< int >((std::string const &)*arg2,(int const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::GenericEnvironment *arg1 = (pladapt::GenericEnvironment *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::GenericEnvironment **)&jarg1; 
  {
    try {
      result = pladapt_GenericEnvironment_toString(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::GenericEnvironment *obj = *((pladapt::GenericEnvironment **)&objarg);
  (void)jcls;
  SwigDirector_GenericEnvironment *director = dynamic_cast<SwigDirector_GenericEnvironment *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::GenericEnvironment *obj = *((pladapt::GenericEnvironment **)&objarg);
  SwigDirector_GenericEnvironment *director = dynamic_cast<SwigDirector_GenericEnvironment *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1JointEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::shared_ptr< pladapt::Environment > *arg1 = 0 ;
  std::shared_ptr< pladapt::Environment > *arg2 = 0 ;
  pladapt::JointEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< pladapt::Environment > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::shared_ptr< pladapt::Environment > const & reference is null");
    return 0;
  } 
  arg2 = *(std::shared_ptr< pladapt::Environment > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::shared_ptr< pladapt::Environment > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (pladapt::JointEnvironment *)new SwigDirector_JointEnvironment(jenv,(std::shared_ptr< pladapt::Environment > const &)*arg1,(std::shared_ptr< pladapt::Environment > const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::JointEnvironment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  {
    try {
      result = (unsigned int)((pladapt::JointEnvironment const *)arg1)->getNumberOfComponents();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getNumberOfComponentsSwigExplicitJointEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  {
    try {
      result = (unsigned int)((pladapt::JointEnvironment const *)arg1)->pladapt::JointEnvironment::getNumberOfComponents();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getComponent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  unsigned int arg2 ;
  pladapt::Environment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (pladapt::Environment *) &((pladapt::JointEnvironment const *)arg1)->getComponent(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Environment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getComponentSwigExplicitJointEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  unsigned int arg2 ;
  pladapt::Environment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (pladapt::Environment *) &((pladapt::JointEnvironment const *)arg1)->pladapt::JointEnvironment::getComponent(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::Environment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::JointEnvironment const *)arg1)->getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1getTypeSwigExplicitJointEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  pladapt::Environment::EnvironmentClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  {
    try {
      result = (pladapt::Environment::EnvironmentClass)((pladapt::JointEnvironment const *)arg1)->pladapt::JointEnvironment::getType();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1JointEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::JointEnvironment *arg1 = (pladapt::JointEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::JointEnvironment **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::JointEnvironment *obj = *((pladapt::JointEnvironment **)&objarg);
  (void)jcls;
  SwigDirector_JointEnvironment *director = dynamic_cast<SwigDirector_JointEnvironment *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::JointEnvironment *obj = *((pladapt::JointEnvironment **)&objarg);
  SwigDirector_JointEnvironment *director = dynamic_cast<SwigDirector_JointEnvironment *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1GenericConfigurationManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::GenericConfigurationManager *arg1 = (pladapt::GenericConfigurationManager *) 0 ;
  std::shared_ptr< pladapt::GenericConfigurationManager > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  pladapt::GenericConfigurationManager > **)&jarg1;
  arg1 = (pladapt::GenericConfigurationManager *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericConfigurationManager_1getConfigurationTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::GenericConfigurationManager *arg1 = (pladapt::GenericConfigurationManager *) 0 ;
  std::shared_ptr< pladapt::GenericConfigurationManager > *smartarg1 = 0 ;
  pladapt::GenericConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  pladapt::GenericConfigurationManager > **)&jarg1;
  arg1 = (pladapt::GenericConfigurationManager *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (pladapt::GenericConfiguration *) &(arg1)->getConfigurationTemplate();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericConfigurationManager_1addNewConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::GenericConfigurationManager *arg1 = (pladapt::GenericConfigurationManager *) 0 ;
  std::shared_ptr< pladapt::GenericConfigurationManager > *smartarg1 = 0 ;
  pladapt::GenericConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  pladapt::GenericConfigurationManager > **)&jarg1;
  arg1 = (pladapt::GenericConfigurationManager *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (pladapt::GenericConfiguration *) &(arg1)->addNewConfiguration();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericConfigurationManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::GenericConfigurationManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::GenericConfigurationManager *)new pladapt::GenericConfigurationManager();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(std::shared_ptr<  pladapt::GenericConfigurationManager > **)&jresult = result ? new std::shared_ptr<  pladapt::GenericConfigurationManager >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getAdditiveUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->getAdditiveUtility((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getAdditiveUtilitySwigExplicitUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->pladapt::UtilityFunction::getAdditiveUtility((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getMultiplicativeUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->getMultiplicativeUtility((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getMultiplicativeUtilitySwigExplicitUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->pladapt::UtilityFunction::getMultiplicativeUtility((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getFinalReward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->getFinalReward((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getFinalRewardSwigExplicitUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->pladapt::UtilityFunction::getFinalReward((pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getAdaptationReward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Configuration *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Configuration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->getAdaptationReward((pladapt::Configuration const &)*arg2,(pladapt::Configuration const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1getAdaptationRewardSwigExplicitUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Configuration *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Configuration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::UtilityFunction const *)arg1)->pladapt::UtilityFunction::getAdaptationReward((pladapt::Configuration const &)*arg2,(pladapt::Configuration const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1UtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::UtilityFunction *arg1 = (pladapt::UtilityFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::UtilityFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1UtilityFunction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::UtilityFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::UtilityFunction *)new SwigDirector_UtilityFunction(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::UtilityFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::UtilityFunction *obj = *((pladapt::UtilityFunction **)&objarg);
  (void)jcls;
  SwigDirector_UtilityFunction *director = dynamic_cast<SwigDirector_UtilityFunction *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_UtilityFunction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::UtilityFunction *obj = *((pladapt::UtilityFunction **)&objarg);
  SwigDirector_UtilityFunction *director = dynamic_cast<SwigDirector_UtilityFunction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1GenericUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenAdditiveUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->getGenAdditiveUtility((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenAdditiveUtilitySwigExplicitGenericUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->pladapt::GenericUtilityFunction::getGenAdditiveUtility((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenMultiplicativeUtility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->getGenMultiplicativeUtility((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenMultiplicativeUtilitySwigExplicitGenericUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->pladapt::GenericUtilityFunction::getGenMultiplicativeUtility((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenFinalReward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->getGenFinalReward((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenFinalRewardSwigExplicitGenericUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->pladapt::GenericUtilityFunction::getGenFinalReward((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenAdaptationReward(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericConfiguration *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->getGenAdaptationReward((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericConfiguration const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1getGenAdaptationRewardSwigExplicitGenericUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = (pladapt::GenericUtilityFunction *) 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericConfiguration *arg3 = 0 ;
  int arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1; 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  {
    try {
      result = (double)((pladapt::GenericUtilityFunction const *)arg1)->pladapt::GenericUtilityFunction::getGenAdaptationReward((pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericConfiguration const &)*arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericUtilityFunction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::GenericUtilityFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::GenericUtilityFunction *)new SwigDirector_GenericUtilityFunction(jenv);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericUtilityFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  pladapt::GenericUtilityFunction *obj = *((pladapt::GenericUtilityFunction **)&objarg);
  (void)jcls;
  SwigDirector_GenericUtilityFunction *director = dynamic_cast<SwigDirector_GenericUtilityFunction *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  pladapt::GenericUtilityFunction *obj = *((pladapt::GenericUtilityFunction **)&objarg);
  SwigDirector_GenericUtilityFunction *director = dynamic_cast<SwigDirector_GenericUtilityFunction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1DTMCPartitionedStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  pladapt::DTMCPartitionedStates *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (pladapt::DTMCPartitionedStates *)new pladapt::DTMCPartitionedStates(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::DTMCPartitionedStates **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_DTMCPartitionedStates_1setTransitionProbability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  pladapt::DTMCPartitionedStates *arg1 = (pladapt::DTMCPartitionedStates *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::DTMCPartitionedStates **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setTransitionProbability(arg2,arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_DTMCPartitionedStates_1assignToPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  pladapt::DTMCPartitionedStates *arg1 = (pladapt::DTMCPartitionedStates *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::DTMCPartitionedStates **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      (arg1)->assignToPart(arg2,arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_DTMCPartitionedStates_1getNumberOfParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::DTMCPartitionedStates *arg1 = (pladapt::DTMCPartitionedStates *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::DTMCPartitionedStates **)&jarg1; 
  {
    try {
      result = (unsigned int)((pladapt::DTMCPartitionedStates const *)arg1)->getNumberOfParts();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_DTMCPartitionedStates_1isLastPartFinal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pladapt::DTMCPartitionedStates *arg1 = (pladapt::DTMCPartitionedStates *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::DTMCPartitionedStates **)&jarg1; 
  {
    try {
      result = (bool)((pladapt::DTMCPartitionedStates const *)arg1)->isLastPartFinal();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1DTMCPartitionedStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::DTMCPartitionedStates *arg1 = (pladapt::DTMCPartitionedStates *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::DTMCPartitionedStates **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1EnvironmentDTMCPartitioned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  pladapt::EnvironmentDTMCPartitioned *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (pladapt::EnvironmentDTMCPartitioned *)new pladapt::EnvironmentDTMCPartitioned(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::EnvironmentDTMCPartitioned **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1EnvironmentDTMCPartitioned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::EnvironmentDTMCPartitioned *arg1 = (pladapt::EnvironmentDTMCPartitioned *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_EnvironmentDTMCPartitioned_1createJointDTMC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  pladapt::EnvironmentDTMCPartitioned *arg1 = 0 ;
  pladapt::EnvironmentDTMCPartitioned *arg2 = 0 ;
  SwigValueWrapper< pladapt::EnvironmentDTMCPartitioned > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::EnvironmentDTMCPartitioned & reference is null");
    return 0;
  } 
  arg2 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::EnvironmentDTMCPartitioned & reference is null");
    return 0;
  } 
  {
    try {
      result = pladapt::EnvironmentDTMCPartitioned::createJointDTMC(*arg1,*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::EnvironmentDTMCPartitioned **)&jresult = new pladapt::EnvironmentDTMCPartitioned((const pladapt::EnvironmentDTMCPartitioned &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_EnvironmentDTMCPartitioned_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::EnvironmentDTMCPartitioned *arg1 = (pladapt::EnvironmentDTMCPartitioned *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg1; 
  {
    try {
      result = pladapt_EnvironmentDTMCPartitioned_toString(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1GenericEnvironmentDTMCPartitioned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  pladapt::GenericEnvironmentDTMCPartitioned *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (pladapt::GenericEnvironmentDTMCPartitioned *)new pladapt::GenericEnvironmentDTMCPartitioned(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::GenericEnvironmentDTMCPartitioned **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1GenericEnvironmentDTMCPartitioned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::GenericEnvironmentDTMCPartitioned *arg1 = (pladapt::GenericEnvironmentDTMCPartitioned *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::GenericEnvironmentDTMCPartitioned **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_GenericEnvironmentDTMCPartitioned_1setStateValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  pladapt::GenericEnvironmentDTMCPartitioned *arg1 = (pladapt::GenericEnvironmentDTMCPartitioned *) 0 ;
  unsigned int arg2 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericEnvironmentDTMCPartitioned **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStateValue(arg2,(pladapt::GenericEnvironment const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_AdaptationManager_1setDebug(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  pladapt::AdaptationManager *arg1 = (pladapt::AdaptationManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::AdaptationManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setDebug(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_AdaptationManager_1supportsStrategy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pladapt::AdaptationManager *arg1 = (pladapt::AdaptationManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::AdaptationManager **)&jarg1; 
  {
    try {
      result = (bool)((pladapt::AdaptationManager const *)arg1)->supportsStrategy();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_AdaptationManager_1getStrategy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::AdaptationManager *arg1 = (pladapt::AdaptationManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::list< std::set< std::string > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::AdaptationManager **)&jarg1; 
  {
    try {
      result = (arg1)->getStrategy();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::shared_ptr< pladapt::Strategy > **)&jresult = new std::shared_ptr< pladapt::Strategy >((const std::shared_ptr< pladapt::Strategy > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1AdaptationManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::AdaptationManager *arg1 = (pladapt::AdaptationManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::AdaptationManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1NO_1LATENCY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::NO_LATENCY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1REACH_1OPTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::REACH_OPTIONS;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1REACH_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::REACH_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1REACH_1PREFIX_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::REACH_PREFIX;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1REACH_1MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::REACH_MODEL;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1REACH_1SCOPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::SDPAdaptationManager::REACH_SCOPE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1SDPAdaptationManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::SDPAdaptationManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::SDPAdaptationManager *)new pladapt::SDPAdaptationManager();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::SDPAdaptationManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1supportsStrategy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  pladapt::SDPAdaptationManager *arg1 = (pladapt::SDPAdaptationManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::SDPAdaptationManager **)&jarg1; 
  {
    try {
      result = (bool)((pladapt::SDPAdaptationManager const *)arg1)->supportsStrategy();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1getStrategy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::SDPAdaptationManager *arg1 = (pladapt::SDPAdaptationManager *) 0 ;
  SwigValueWrapper< std::shared_ptr< std::list< std::set< std::string > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::SDPAdaptationManager **)&jarg1; 
  {
    try {
      result = (arg1)->getStrategy();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::shared_ptr< pladapt::Strategy > **)&jresult = new std::shared_ptr< pladapt::Strategy >((const std::shared_ptr< pladapt::Strategy > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1SDPAdaptationManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::SDPAdaptationManager *arg1 = (pladapt::SDPAdaptationManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::SDPAdaptationManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1JavaSDPAdaptationManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::JavaSDPAdaptationManager *arg1 = (pladapt::JavaSDPAdaptationManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::JavaSDPAdaptationManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_JavaSDPAdaptationManager_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  pladapt::JavaSDPAdaptationManager *arg1 = (pladapt::JavaSDPAdaptationManager *) 0 ;
  std::shared_ptr< pladapt::GenericConfigurationManager const > arg2 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< pladapt::GenericConfigurationManager const > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(pladapt::JavaSDPAdaptationManager **)&jarg1; 
  argp2 = *(std::shared_ptr< pladapt::GenericConfigurationManager const > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->initialize(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JavaSDPAdaptationManager_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  pladapt::JavaSDPAdaptationManager *arg1 = (pladapt::JavaSDPAdaptationManager *) 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::EnvironmentDTMCPartitioned *arg3 = 0 ;
  pladapt::UtilityFunction *arg4 = 0 ;
  unsigned int arg5 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(pladapt::JavaSDPAdaptationManager **)&jarg1; 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::EnvironmentDTMCPartitioned const & reference is null");
    return 0;
  } 
  arg4 = *(pladapt::UtilityFunction **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::UtilityFunction const & reference is null");
    return 0;
  } 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (arg1)->evaluateWrapper((pladapt::Configuration const &)*arg2,(pladapt::EnvironmentDTMCPartitioned const &)*arg3,(pladapt::UtilityFunction const &)*arg4,arg5);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1JavaSDPAdaptationManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::JavaSDPAdaptationManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::JavaSDPAdaptationManager *)new pladapt::JavaSDPAdaptationManager();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::JavaSDPAdaptationManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_testGeneric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  pladapt::GenericUtilityFunction *arg1 = 0 ;
  pladapt::GenericConfiguration *arg2 = 0 ;
  pladapt::GenericEnvironment *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::GenericUtilityFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericUtilityFunction const & reference is null");
    return 0;
  } 
  arg2 = *(pladapt::GenericConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::GenericEnvironment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericEnvironment const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)pladapt::testGeneric((pladapt::GenericUtilityFunction const &)*arg1,(pladapt::GenericConfiguration const &)*arg2,(pladapt::GenericEnvironment const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_testUtilityFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = 0 ;
  pladapt::Configuration *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::UtilityFunction const & reference is null");
    return 0;
  } 
  arg2 = *(pladapt::Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Configuration const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)pladapt::testUtilityFunction((pladapt::UtilityFunction const &)*arg1,(pladapt::Configuration const &)*arg2,(pladapt::Environment const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_pladapt_pladaptJNI_testUtilityFunctionWithConfigMgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  pladapt::UtilityFunction *arg1 = 0 ;
  pladapt::GenericConfigurationManager *arg2 = 0 ;
  pladapt::Environment *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(pladapt::UtilityFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::UtilityFunction const & reference is null");
    return 0;
  } 
  
  arg2 = (pladapt::GenericConfigurationManager *)((*(std::shared_ptr< const pladapt::GenericConfigurationManager > **)&jarg2) ? (*(std::shared_ptr< const pladapt::GenericConfigurationManager > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::GenericConfigurationManager const & reference is null");
    return 0;
  } 
  arg3 = *(pladapt::Environment **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::Environment const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)pladapt::testUtilityFunctionWithConfigMgr((pladapt::UtilityFunction const &)*arg1,(pladapt::GenericConfigurationManager const &)*arg2,(pladapt::Environment const &)*arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1getInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  pladapt::timeseries::TimeSeriesPredictor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (pladapt::timeseries::TimeSeriesPredictor *)pladapt::timeseries::TimeSeriesPredictor::getInstance((std::vector< std::string > const &)*arg1,arg2,arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::timeseries::TimeSeriesPredictor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1getInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  pladapt::timeseries::TimeSeriesPredictor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (pladapt::timeseries::TimeSeriesPredictor *)pladapt::timeseries::TimeSeriesPredictor::getInstance((std::string const &)*arg1,arg2,arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::timeseries::TimeSeriesPredictor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1getTrainingLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  {
    try {
      result = (unsigned long)((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->getTrainingLength();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1observe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->observe(arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1predict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, (double **)&arg4, jarg4)) return ; 
  {
    try {
      ((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->predict(arg2,arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, (double *)arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1predict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  {
    try {
      ((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->predict(arg2,arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  pladapt::timeseries::TimeSeriesPredictor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  {
    try {
      result = (pladapt::timeseries::TimeSeriesPredictor *)((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->clone();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::timeseries::TimeSeriesPredictor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1predict_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  jdouble *jarr5 ;
  jdouble *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, (double **)&arg5, jarg5)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr6, (double **)&arg6, jarg6)) return ; 
  {
    try {
      ((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->predict(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, (double *)arg5, jarg5); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr6, (double *)arg6, jarg6); 
  delete [] arg5; 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1predict_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jdoubleArray jarg5) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double *arg5 = (double *) 0 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, (double **)&arg5, jarg5)) return ; 
  {
    try {
      ((pladapt::timeseries::TimeSeriesPredictor const *)arg1)->predict(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, (double *)arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1TimeSeriesPredictor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1generateEnvironmentDTMC_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  SwigValueWrapper< pladapt::EnvironmentDTMCPartitioned > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = pladapt_timeseries_TimeSeriesPredictor_generateEnvironmentDTMC__SWIG_0(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::EnvironmentDTMCPartitioned **)&jresult = new pladapt::EnvironmentDTMCPartitioned((const pladapt::EnvironmentDTMCPartitioned &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1generateEnvironmentDTMC_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  SwigValueWrapper< pladapt::EnvironmentDTMCPartitioned > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = pladapt_timeseries_TimeSeriesPredictor_generateEnvironmentDTMC__SWIG_0(arg1,arg2,arg3);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::EnvironmentDTMCPartitioned **)&jresult = new pladapt::EnvironmentDTMCPartitioned((const pladapt::EnvironmentDTMCPartitioned &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_TimeSeriesPredictor_1generateEnvironmentDTMC_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  pladapt::timeseries::TimeSeriesPredictor *arg1 = (pladapt::timeseries::TimeSeriesPredictor *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< pladapt::EnvironmentDTMCPartitioned > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::timeseries::TimeSeriesPredictor **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = pladapt_timeseries_TimeSeriesPredictor_generateEnvironmentDTMC__SWIG_0(arg1,arg2);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::EnvironmentDTMCPartitioned **)&jresult = new pladapt::EnvironmentDTMCPartitioned((const pladapt::EnvironmentDTMCPartitioned &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1generateEnvironmentDTMC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  pladapt::EnvironmentDTMCPartitioned *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(pladapt::EnvironmentDTMCPartitioned **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pladapt::EnvironmentDTMCPartitioned const & reference is null");
    return 0;
  } 
  {
    try {
      result = pladapt::PMCAdaptationManager::generateEnvironmentDTMC((pladapt::EnvironmentDTMCPartitioned const &)*arg1);
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1NO_1LATENCY_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      pladapt::PMCAdaptationManager::NO_LATENCY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)pladapt::PMCAdaptationManager::NO_LATENCY, (const char *)arg1);
    } else {
      pladapt::PMCAdaptationManager::NO_LATENCY = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1NO_1LATENCY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::PMCAdaptationManager::NO_LATENCY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1TEMPLATE_1PATH_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      pladapt::PMCAdaptationManager::TEMPLATE_PATH = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)pladapt::PMCAdaptationManager::TEMPLATE_PATH, (const char *)arg1);
    } else {
      pladapt::PMCAdaptationManager::TEMPLATE_PATH = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1TEMPLATE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)pladapt::PMCAdaptationManager::TEMPLATE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_new_1PMCAdaptationManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  pladapt::PMCAdaptationManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (pladapt::PMCAdaptationManager *)new pladapt::PMCAdaptationManager();
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(pladapt::PMCAdaptationManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_delete_1PMCAdaptationManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  pladapt::PMCAdaptationManager *arg1 = (pladapt::PMCAdaptationManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pladapt::PMCAdaptationManager **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericConfiguration_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::Configuration **)&baseptr = *(pladapt::GenericConfiguration **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericEnvironment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::Environment **)&baseptr = *(pladapt::GenericEnvironment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JointEnvironment_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::Environment **)&baseptr = *(pladapt::JointEnvironment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericUtilityFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::UtilityFunction **)&baseptr = *(pladapt::GenericUtilityFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_EnvironmentDTMCPartitioned_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::DTMCPartitionedStates **)&baseptr = *(pladapt::EnvironmentDTMCPartitioned **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_GenericEnvironmentDTMCPartitioned_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::EnvironmentDTMCPartitioned **)&baseptr = *(pladapt::GenericEnvironmentDTMCPartitioned **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_SDPAdaptationManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::AdaptationManager **)&baseptr = *(pladapt::SDPAdaptationManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_JavaSDPAdaptationManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::SDPAdaptationManager **)&baseptr = *(pladapt::JavaSDPAdaptationManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_pladapt_pladaptJNI_PMCAdaptationManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(pladapt::AdaptationManager **)&baseptr = *(pladapt::PMCAdaptationManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_pladapt_pladaptJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[25] = {
    {
      "SwigDirector_Environment_getNumberOfComponents", "(Lpladapt/Environment;)J" 
    },
    {
      "SwigDirector_Environment_getComponent", "(Lpladapt/Environment;J)J" 
    },
    {
      "SwigDirector_Environment_asDouble", "(Lpladapt/Environment;)D" 
    },
    {
      "SwigDirector_Environment_getType", "(Lpladapt/Environment;)I" 
    },
    {
      "SwigDirector_Configuration_getType", "(Lpladapt/Configuration;)I" 
    },
    {
      "SwigDirector_Configuration_equals", "(Lpladapt/Configuration;J)Z" 
    },
    {
      "SwigDirector_GenericConfiguration_getType", "(Lpladapt/GenericConfiguration;)I" 
    },
    {
      "SwigDirector_GenericConfiguration_equals", "(Lpladapt/GenericConfiguration;J)Z" 
    },
    {
      "SwigDirector_GenericEnvironment_getNumberOfComponents", "(Lpladapt/GenericEnvironment;)J" 
    },
    {
      "SwigDirector_GenericEnvironment_getComponent", "(Lpladapt/GenericEnvironment;J)J" 
    },
    {
      "SwigDirector_GenericEnvironment_asDouble", "(Lpladapt/GenericEnvironment;)D" 
    },
    {
      "SwigDirector_GenericEnvironment_getType", "(Lpladapt/GenericEnvironment;)I" 
    },
    {
      "SwigDirector_GenericEnvironment_equals", "(Lpladapt/GenericEnvironment;J)Z" 
    },
    {
      "SwigDirector_JointEnvironment_getNumberOfComponents", "(Lpladapt/JointEnvironment;)J" 
    },
    {
      "SwigDirector_JointEnvironment_getComponent", "(Lpladapt/JointEnvironment;J)J" 
    },
    {
      "SwigDirector_JointEnvironment_asDouble", "(Lpladapt/JointEnvironment;)D" 
    },
    {
      "SwigDirector_JointEnvironment_getType", "(Lpladapt/JointEnvironment;)I" 
    },
    {
      "SwigDirector_UtilityFunction_getAdditiveUtility", "(Lpladapt/UtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_UtilityFunction_getMultiplicativeUtility", "(Lpladapt/UtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_UtilityFunction_getFinalReward", "(Lpladapt/UtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_UtilityFunction_getAdaptationReward", "(Lpladapt/UtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_GenericUtilityFunction_getGenAdditiveUtility", "(Lpladapt/GenericUtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_GenericUtilityFunction_getGenMultiplicativeUtility", "(Lpladapt/GenericUtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_GenericUtilityFunction_getGenFinalReward", "(Lpladapt/GenericUtilityFunction;JJI)D" 
    },
    {
      "SwigDirector_GenericUtilityFunction_getGenAdaptationReward", "(Lpladapt/GenericUtilityFunction;JJI)D" 
    }
  };
  Swig::jclass_pladaptJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_pladaptJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

